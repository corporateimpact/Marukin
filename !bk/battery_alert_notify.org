#!/usr/bin/env python abort_voltage LINE alert 
#coding=utf-8
#----- 電圧異常時のＬＩＮＥアラート -----
import requests

#<< file path >>
#<マルキンサーバ>
Path_batteryinfo = "/home/upload/infos/battery/batteryinfo.ini"
Path_alertinfo = "/home/upload/infos/battery/alertinfo.ini"

#<< Battery Boundary >>
b_high_limit = 15.0
b_low_limit = 11.5

#<< File open >>
with open(Path_batteryinfo) as voltinfo:
	v_info = voltinfo.read().replace("\n","")
print(v_info)
with open(Path_alertinfo) as alertinfo:
	a_info = alertinfo.read().replace("\n","")
print(a_info)

line_message = " << マルキン　アラート >>\n"
line_message = line_message + "電圧【 " + v_info + "V 】"



#-----< LINE notify Function definition-Start >-----
def LINE_notify(line_message):
    url = "https://notify-api.line.me/api/notify"
#    token = #Here ACCESS-TOKEN input
    token = "C7sEqmhEl6z1vKZxf8a7abS6jXynUUPuKGX26YrmbEh" #<-GINZAKE pj
#    token = "ObFoG8pLNgIGpm04j7t0abp9wKMAJAuHHp08VFihIOb" #<-TEST
    headers = {"Authorization" : "Bearer "+ token}
    print (line_message)
    payload = {"message" :  line_message}

    r = requests.post(url ,headers = headers ,params=payload)

#-----< LINE notify Function definition-End >-----



#<< Voltage check >>
if (float(v_info) >= b_low_limit) and (float(v_info) <= b_high_limit) and (a_info != "NORMAL"):
	#LINE alert
	line_message = line_message + "電圧が回復しました。"
	LINE_notify(line_message)	#LINE to message send
	#alertinfo.ini update(abnormal --> "NORMAL")
	with open(Path_alertinfo, mode="w") as alertinfo_w:
	    alertinfo_w.write("NORMAL")

#<< voltage abnormal >>
elif (float(v_info) < b_low_limit) and (a_info == "NORMAL"):  #low_boltage LINE alert
	#LINE alert
	line_message = line_message + "電圧が低下しました。"
	LINE_notify(line_message)	#LINE to message send
	#alertinfo.ini update("NORMAL" --> "LOW_VOLTAGE")
	with open(Path_alertinfo, mode="w") as alertinfo_w:
	    alertinfo_w.write("LOW_VOLTAGE")
elif (float(v_info) > b_high_limit) and (a_info == "NORMAL"):  #high_boltage LINE alert
	#LINE alert
	line_message = line_message + "電圧が上昇しました。"
	LINE_notify(line_message)	#LINE to message send
	#alertinfo.ini update("NORMAL" --> "HIGH_VOLTAGE")
	with open(Path_alertinfo, mode="w") as alertinfo_w:
	    alertinfo_w.write("HIGH_VOLTAGE")
else:
	print("前回の状態を継続中")
